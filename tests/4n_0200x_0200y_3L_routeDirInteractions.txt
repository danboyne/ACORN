#12345678901234567890123456789012345678901234567890123456789012345678901234567890
# Any line that begins with a '#' character is a comment and is disregarded by
# the auto-router program. Blank lines are allowed. Use them to add clarity to 
# the input file.
#
# You can add additional comments following two consecutive slash characters:
# grid_resolution = 5  // 5 micron grid is fine enough for 20um line/space
#


# Specify the dimension in microns of the grid that the auto-router will use.
# Use a dimension that is less than one half to one quarter of the smallest
# linewidth or spacing in the design.
grid_resolution = 1  // in microns

# Specify the dimensions in millimeters of the grid:
width  = 0.2  // in millimeters
height = 0.2  // in millimeters

# Specify the number of routing layers. Typical values are 1, 2, 4, 6, and 8.
number_layers = 3

# Specify the name of each routing layer and (for multiple layers) the name
# of each intervening via layer. Examples:
# 
#   layer_names = M1 V1-2 M2 V2-3 M3 V3-4 M4  // For 4-layer substrate
#   layer_names = M   // for single-layer
#
layer_names = M1 V1-2 M2 V2-3 M3

#
# Specify the origin that the start/end-locations are relative to. Allowed 
# values are: center, lower_left, upper_left, lower_right, upper_right
#
origin = lower_left


#
# Specify the start- and end-locations of the paths to be routed. Dimensions are
# in microns, relative to the origin specified with the 'origin' statement.
# Start- and End-Layers are specified using the names from the 'layer_names'
# statement.
#
start_nets
# Net                Start   Start    Start        End     End    End    Net-specific     Diff Pair Partner
# Name               Layer     X        Y         Layer     X      Y     Rule (optional)  (optional)
# ----------------- ------- -------- --------    -------  -----  -----   ---------------  -----------------
Net_A                 M1       20      160         M3       40    150      50_ohm          Net_B
Net_B                 M1       20      140         M3       40    130      50_ohm          Net_A
Net_C                 M1       20       80         M3       40     70
Net_D                 M1       20       40         M3       40     30 
end_nets


# 
# Specify which areas on each layer to block from routing. By default, all areas
# are routable. Use the following BLOCK or UNBLOCK statements to define 
# unroutable areas. All coordinates are in microns.
#
#  BLOCK RECT <layer name> X1 Y1 X2 Y2 // Block the rectangle defined by 
#                                      // (x1, y1) and (x2, y2)
#
#  BLOCK TRI  <layer name> X1 Y1 X2 Y2 X2 Y3 // Block triangle defined by 
#                                            // 3 x/y coordinates
#
#  BLOCK CIR  <layer name> X Y R  // Block circle defined by center (x,y) and 
#                                 // radius R
#
#  BLOCK ALL <layer name>         // Block all cells on layer <layer name>
#
#  UNBLOCK RECT <layer name> X1 Y1 X2 Y2 // Unblock the rectangle defined by 
#                                        // (x1, y1) and (x2, y2)
#
#  UNBLOCK TRI  <layer name> X1 Y1 X2 Y2 X2 Y3 // Unblock triangle defined 
#                                              // by 3 x/y coordinates
#
#  UNBLOCK CIR  <layer name> X Y R  // Unblock circle defined by center (x,y) 
#                                   // and radius R
#
#  UNBLOCK ALL <layer name>         // Unblock all cells on layer <layer name> 
#
# As an example, to create a keep-out zone on the perimeter of layer M1,
# use the folowing two commands:
#
#    BLOCK ALL M1                    // Block all of M1
#    UNBLOCK RECT M1 20 20 16.8 16.8 // Unblock a large rectangle in middle of M1
#


#
# Design rules: #########################################
#
design_rule_set Any_Direction   Design Rules routing in any direction
  line_width        =  3
  line_spacing      =  3
  via_up_diameter   =  5
  via_down_diameter =  5

  via_up_to_trace_spacing      = 3
  via_down_to_trace_spacing    = 3
  via_up_to_via_up_spacing     = 3
  via_down_to_via_down_spacing = 3
  via_up_to_via_down_spacing   = 3

  exception = 50_ohm   // Exception design rules for 50-ohm differential pairs 
    diff_pair_pitch = 10  // Center-to-center pitch in break-out zone
  end_exception  // End of exception for 50-ohm differential pairs 
  
end_design_rule_set   // End of design rule set

design_rule_set Lateral_Routing    Design Rules that prohibit vias
  line_width        =  3
  line_spacing      =  3
  via_up_diameter   =  5
  via_down_diameter =  5

  via_up_to_trace_spacing      = 3
  via_down_to_trace_spacing    = 3
  via_up_to_via_up_spacing     = 3
  via_down_to_via_down_spacing = 3
  via_up_to_via_down_spacing   = 3

  allowed_directions = ANY_LATERAL  // Prevents vias in this region

  exception = 50_ohm   // Exception design rules for 50-ohm differential pairs 
    diff_pair_pitch = 10  // Center-to-center pitch in break-out zone
  end_exception  // End of exception for 50-ohm differential pairs 
  
end_design_rule_set   // End of design rule set


design_rule_set Manhattan_X   Design Rules for routing in N/S/E/W/NE/NW/SE/SW directions only
  line_width        =  3
  line_spacing      =  3
  via_up_diameter   =  5
  via_down_diameter =  5

  via_up_to_trace_spacing      = 3
  via_down_to_trace_spacing    = 3
  via_up_to_via_up_spacing     = 3
  via_down_to_via_down_spacing = 3
  via_up_to_via_down_spacing   = 3

  allowed_directions = MANHATTAN_X

  exception = 50_ohm   // Exception design rules for 50-ohm differential pairs 
    diff_pair_pitch = 10  // Center-to-center pitch in break-out zone
  end_exception  // End of exception for 50-ohm differential pairs 
  
end_design_rule_set   // End of design rule set


############ Define design-rule zones: #####################
##
## Specify which areas on each layer will use each design-rule set.
## All coordinates are in microns.
##
##  DR_zone <DR name> <layer name>  RECT  X1 Y1 X2 Y2 // Use DR set 'DR name' in
##                                                    // rectangle defined by
##                                                    // (x1, y1) and (x2, y2)
##                                                    // on layer 'layer name'.
##
##  DR_zone <DR name> <layer name> TRI  X1 Y1 X2 Y2 X2 Y3 // User DR set 'DR name'
##                                                        // in triangle defined by
##                                                        // 3 x/y coordinates on
##                                                        // layer 'layer name'.
##
##  DR_zone <DR name> <layer name> CIR  X Y R  // Use DR set 'DR name' in circle
##                                             // defined by center (x,y) and radius
##                                             // R on layer 'layer name'.
##
##  DR_zone <DR name> <layer name> ALL      // Use DR set 'DR name' on all cells
##                                          // on layer <layer name>.
##
DR_zone   Any_Direction   M1        ALL                            // Any direction allowed on M1
DR_zone   Any_Direction   M2        ALL                            // Right half of M2 allows any direction of routing
DR_zone   Lateral_Routing M2        RECT  0   0        100  200    // Left half of M2 allows only lateral routing
DR_zone   Manhattan_X     M3        ALL                            // Any direction allowed on M3



#################################################################################
#################################################################################
#################################################################################
#
# The following parameters affect the final routed solution and run-time, but
# should not be modified without extreme caution:
#
#

# The parameter 'maxIterations' is the maximum number of iterations the program
# will make to find a crossing-free solution.
maxIterations = 50

# The parameter 'violationFreeThreshold' is the minimum number of crossing-free
# solutions that program will find before deciding that it has found the
# optimal solution.
violationFreeThreshold = 10

# The parameter 'vertCost' is the cost of routing up or down to a different
# routing layer, i.e., the cost of a layer-to-layer via. The value is in
# microns, and should be interpreted as half the trace-length that could be
# avoided by adding a via to a different layer.
vertCost  = 50   // in microns of equivalent trace length

# The parameter 'runsPerPngMap' is the number of iterations to run between
# writing PNG versions of the routing maps.
runsPerPngMap =  1
